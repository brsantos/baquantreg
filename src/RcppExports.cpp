// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// BayesQR
List BayesQR(double tau, arma::colvec y, arma::mat X, int itNum, int thin, arma::colvec betaValue, double sigmaValue, arma::vec vSampleInit, double priorVar, NumericVector hyperSigma, int refresh, bool sigmaSampling, bool quiet, bool tobit, bool recordLat);
RcppExport SEXP _baquantreg_BayesQR(SEXP tauSEXP, SEXP ySEXP, SEXP XSEXP, SEXP itNumSEXP, SEXP thinSEXP, SEXP betaValueSEXP, SEXP sigmaValueSEXP, SEXP vSampleInitSEXP, SEXP priorVarSEXP, SEXP hyperSigmaSEXP, SEXP refreshSEXP, SEXP sigmaSamplingSEXP, SEXP quietSEXP, SEXP tobitSEXP, SEXP recordLatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type itNum(itNumSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type betaValue(betaValueSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaValue(sigmaValueSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vSampleInit(vSampleInitSEXP);
    Rcpp::traits::input_parameter< double >::type priorVar(priorVarSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type hyperSigma(hyperSigmaSEXP);
    Rcpp::traits::input_parameter< int >::type refresh(refreshSEXP);
    Rcpp::traits::input_parameter< bool >::type sigmaSampling(sigmaSamplingSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    Rcpp::traits::input_parameter< bool >::type tobit(tobitSEXP);
    Rcpp::traits::input_parameter< bool >::type recordLat(recordLatSEXP);
    rcpp_result_gen = Rcpp::wrap(BayesQR(tau, y, X, itNum, thin, betaValue, sigmaValue, vSampleInit, priorVar, hyperSigma, refresh, sigmaSampling, quiet, tobit, recordLat));
    return rcpp_result_gen;
END_RCPP
}
// tpBayesQR
List tpBayesQR(double tau, arma::colvec y, arma::mat X, int itNum, int thin, arma::vec betaValue, double sigmaValue, arma::vec vSampleInit, arma::vec gammaValue, double sigmaGamma, int link, double priorVar, int refresh, bool quiet);
RcppExport SEXP _baquantreg_tpBayesQR(SEXP tauSEXP, SEXP ySEXP, SEXP XSEXP, SEXP itNumSEXP, SEXP thinSEXP, SEXP betaValueSEXP, SEXP sigmaValueSEXP, SEXP vSampleInitSEXP, SEXP gammaValueSEXP, SEXP sigmaGammaSEXP, SEXP linkSEXP, SEXP priorVarSEXP, SEXP refreshSEXP, SEXP quietSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type itNum(itNumSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type betaValue(betaValueSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaValue(sigmaValueSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type vSampleInit(vSampleInitSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type gammaValue(gammaValueSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaGamma(sigmaGammaSEXP);
    Rcpp::traits::input_parameter< int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< double >::type priorVar(priorVarSEXP);
    Rcpp::traits::input_parameter< int >::type refresh(refreshSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    rcpp_result_gen = Rcpp::wrap(tpBayesQR(tau, y, X, itNum, thin, betaValue, sigmaValue, vSampleInit, gammaValue, sigmaGamma, link, priorVar, refresh, quiet));
    return rcpp_result_gen;
END_RCPP
}
// ziTobitBayesQR
List ziTobitBayesQR(double tau, arma::colvec y, arma::mat X, int itNum, int thin, arma::colvec betaValue, double sigmaValue, arma::colvec gammaValue, double sigmaGamma, int link, double priorVar, int refresh, bool quiet, int burnin);
RcppExport SEXP _baquantreg_ziTobitBayesQR(SEXP tauSEXP, SEXP ySEXP, SEXP XSEXP, SEXP itNumSEXP, SEXP thinSEXP, SEXP betaValueSEXP, SEXP sigmaValueSEXP, SEXP gammaValueSEXP, SEXP sigmaGammaSEXP, SEXP linkSEXP, SEXP priorVarSEXP, SEXP refreshSEXP, SEXP quietSEXP, SEXP burninSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type itNum(itNumSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type betaValue(betaValueSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaValue(sigmaValueSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type gammaValue(gammaValueSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaGamma(sigmaGammaSEXP);
    Rcpp::traits::input_parameter< int >::type link(linkSEXP);
    Rcpp::traits::input_parameter< double >::type priorVar(priorVarSEXP);
    Rcpp::traits::input_parameter< int >::type refresh(refreshSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    Rcpp::traits::input_parameter< int >::type burnin(burninSEXP);
    rcpp_result_gen = Rcpp::wrap(ziTobitBayesQR(tau, y, X, itNum, thin, betaValue, sigmaValue, gammaValue, sigmaGamma, link, priorVar, refresh, quiet, burnin));
    return rcpp_result_gen;
END_RCPP
}
// checkPoints
arma::mat checkPoints(arma::colvec gridy1, arma::colvec gridy2, arma::mat directions, arma::mat orthBasis, arma::mat fullestimates, arma::colvec xvalue, bool splines, arma::colvec addterm);
RcppExport SEXP _baquantreg_checkPoints(SEXP gridy1SEXP, SEXP gridy2SEXP, SEXP directionsSEXP, SEXP orthBasisSEXP, SEXP fullestimatesSEXP, SEXP xvalueSEXP, SEXP splinesSEXP, SEXP addtermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type gridy1(gridy1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type gridy2(gridy2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type directions(directionsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type orthBasis(orthBasisSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type fullestimates(fullestimatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type xvalue(xvalueSEXP);
    Rcpp::traits::input_parameter< bool >::type splines(splinesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type addterm(addtermSEXP);
    rcpp_result_gen = Rcpp::wrap(checkPoints(gridy1, gridy2, directions, orthBasis, fullestimates, xvalue, splines, addterm));
    return rcpp_result_gen;
END_RCPP
}
// checkPoints_4d
arma::mat checkPoints_4d(arma::colvec gridy1, arma::colvec gridy2, arma::colvec gridy3, arma::colvec gridy4, arma::mat directions, arma::mat orthBasis1, arma::mat orthBasis2, arma::mat orthBasis3, arma::mat fullestimates, arma::colvec xvalue, bool splines, arma::colvec addterm);
RcppExport SEXP _baquantreg_checkPoints_4d(SEXP gridy1SEXP, SEXP gridy2SEXP, SEXP gridy3SEXP, SEXP gridy4SEXP, SEXP directionsSEXP, SEXP orthBasis1SEXP, SEXP orthBasis2SEXP, SEXP orthBasis3SEXP, SEXP fullestimatesSEXP, SEXP xvalueSEXP, SEXP splinesSEXP, SEXP addtermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type gridy1(gridy1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type gridy2(gridy2SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type gridy3(gridy3SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type gridy4(gridy4SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type directions(directionsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type orthBasis1(orthBasis1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type orthBasis2(orthBasis2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type orthBasis3(orthBasis3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type fullestimates(fullestimatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type xvalue(xvalueSEXP);
    Rcpp::traits::input_parameter< bool >::type splines(splinesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type addterm(addtermSEXP);
    rcpp_result_gen = Rcpp::wrap(checkPoints_4d(gridy1, gridy2, gridy3, gridy4, directions, orthBasis1, orthBasis2, orthBasis3, fullestimates, xvalue, splines, addterm));
    return rcpp_result_gen;
END_RCPP
}
// checkPoints_cube
arma::mat checkPoints_cube(arma::colvec gridy1, arma::colvec gridy2, arma::colvec gridy3, arma::mat directions, arma::mat orthBasis1, arma::mat orthBasis2, arma::mat fullestimates, arma::colvec xvalue, bool splines, arma::colvec addterm);
RcppExport SEXP _baquantreg_checkPoints_cube(SEXP gridy1SEXP, SEXP gridy2SEXP, SEXP gridy3SEXP, SEXP directionsSEXP, SEXP orthBasis1SEXP, SEXP orthBasis2SEXP, SEXP fullestimatesSEXP, SEXP xvalueSEXP, SEXP splinesSEXP, SEXP addtermSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::colvec >::type gridy1(gridy1SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type gridy2(gridy2SEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type gridy3(gridy3SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type directions(directionsSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type orthBasis1(orthBasis1SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type orthBasis2(orthBasis2SEXP);
    Rcpp::traits::input_parameter< arma::mat >::type fullestimates(fullestimatesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type xvalue(xvalueSEXP);
    Rcpp::traits::input_parameter< bool >::type splines(splinesSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type addterm(addtermSEXP);
    rcpp_result_gen = Rcpp::wrap(checkPoints_cube(gridy1, gridy2, gridy3, directions, orthBasis1, orthBasis2, fullestimates, xvalue, splines, addterm));
    return rcpp_result_gen;
END_RCPP
}
// spBayesQR
List spBayesQR(double tau, arma::colvec y, arma::mat X, int itNum, int thin, arma::colvec betaValue, double sigmaValue, arma::mat matDist, double lambda, double tuneP, double alphaValue, double tuneA, double priorVar, int refresh, bool quiet, double jitter, bool includeAlpha, double tuneV, int kMT, double shapeL, double rateL);
RcppExport SEXP _baquantreg_spBayesQR(SEXP tauSEXP, SEXP ySEXP, SEXP XSEXP, SEXP itNumSEXP, SEXP thinSEXP, SEXP betaValueSEXP, SEXP sigmaValueSEXP, SEXP matDistSEXP, SEXP lambdaSEXP, SEXP tunePSEXP, SEXP alphaValueSEXP, SEXP tuneASEXP, SEXP priorVarSEXP, SEXP refreshSEXP, SEXP quietSEXP, SEXP jitterSEXP, SEXP includeAlphaSEXP, SEXP tuneVSEXP, SEXP kMTSEXP, SEXP shapeLSEXP, SEXP rateLSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type itNum(itNumSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type betaValue(betaValueSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaValue(sigmaValueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matDist(matDistSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tuneP(tunePSEXP);
    Rcpp::traits::input_parameter< double >::type alphaValue(alphaValueSEXP);
    Rcpp::traits::input_parameter< double >::type tuneA(tuneASEXP);
    Rcpp::traits::input_parameter< double >::type priorVar(priorVarSEXP);
    Rcpp::traits::input_parameter< int >::type refresh(refreshSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    Rcpp::traits::input_parameter< double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< bool >::type includeAlpha(includeAlphaSEXP);
    Rcpp::traits::input_parameter< double >::type tuneV(tuneVSEXP);
    Rcpp::traits::input_parameter< int >::type kMT(kMTSEXP);
    Rcpp::traits::input_parameter< double >::type shapeL(shapeLSEXP);
    Rcpp::traits::input_parameter< double >::type rateL(rateLSEXP);
    rcpp_result_gen = Rcpp::wrap(spBayesQR(tau, y, X, itNum, thin, betaValue, sigmaValue, matDist, lambda, tuneP, alphaValue, tuneA, priorVar, refresh, quiet, jitter, includeAlpha, tuneV, kMT, shapeL, rateL));
    return rcpp_result_gen;
END_RCPP
}
// sppBayesQR
List sppBayesQR(double tau, arma::colvec y, arma::mat X, int itNum, int thin, arma::colvec betaValue, double sigmaValue, arma::mat matDist, NumericVector lambdaVec, double lambda, double shapeL, double rateL, double tuneP, arma::uvec indices, int m, double alphaValue, double tuneA, double priorVar, bool quiet, int refresh, double jitter, bool includeAlpha, double tuneV, int kMT, bool discLambda);
RcppExport SEXP _baquantreg_sppBayesQR(SEXP tauSEXP, SEXP ySEXP, SEXP XSEXP, SEXP itNumSEXP, SEXP thinSEXP, SEXP betaValueSEXP, SEXP sigmaValueSEXP, SEXP matDistSEXP, SEXP lambdaVecSEXP, SEXP lambdaSEXP, SEXP shapeLSEXP, SEXP rateLSEXP, SEXP tunePSEXP, SEXP indicesSEXP, SEXP mSEXP, SEXP alphaValueSEXP, SEXP tuneASEXP, SEXP priorVarSEXP, SEXP quietSEXP, SEXP refreshSEXP, SEXP jitterSEXP, SEXP includeAlphaSEXP, SEXP tuneVSEXP, SEXP kMTSEXP, SEXP discLambdaSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type y(ySEXP);
    Rcpp::traits::input_parameter< arma::mat >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type itNum(itNumSEXP);
    Rcpp::traits::input_parameter< int >::type thin(thinSEXP);
    Rcpp::traits::input_parameter< arma::colvec >::type betaValue(betaValueSEXP);
    Rcpp::traits::input_parameter< double >::type sigmaValue(sigmaValueSEXP);
    Rcpp::traits::input_parameter< arma::mat >::type matDist(matDistSEXP);
    Rcpp::traits::input_parameter< NumericVector >::type lambdaVec(lambdaVecSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type shapeL(shapeLSEXP);
    Rcpp::traits::input_parameter< double >::type rateL(rateLSEXP);
    Rcpp::traits::input_parameter< double >::type tuneP(tunePSEXP);
    Rcpp::traits::input_parameter< arma::uvec >::type indices(indicesSEXP);
    Rcpp::traits::input_parameter< int >::type m(mSEXP);
    Rcpp::traits::input_parameter< double >::type alphaValue(alphaValueSEXP);
    Rcpp::traits::input_parameter< double >::type tuneA(tuneASEXP);
    Rcpp::traits::input_parameter< double >::type priorVar(priorVarSEXP);
    Rcpp::traits::input_parameter< bool >::type quiet(quietSEXP);
    Rcpp::traits::input_parameter< int >::type refresh(refreshSEXP);
    Rcpp::traits::input_parameter< double >::type jitter(jitterSEXP);
    Rcpp::traits::input_parameter< bool >::type includeAlpha(includeAlphaSEXP);
    Rcpp::traits::input_parameter< double >::type tuneV(tuneVSEXP);
    Rcpp::traits::input_parameter< int >::type kMT(kMTSEXP);
    Rcpp::traits::input_parameter< bool >::type discLambda(discLambdaSEXP);
    rcpp_result_gen = Rcpp::wrap(sppBayesQR(tau, y, X, itNum, thin, betaValue, sigmaValue, matDist, lambdaVec, lambda, shapeL, rateL, tuneP, indices, m, alphaValue, tuneA, priorVar, quiet, refresh, jitter, includeAlpha, tuneV, kMT, discLambda));
    return rcpp_result_gen;
END_RCPP
}

static const R_CallMethodDef CallEntries[] = {
    {"_baquantreg_BayesQR", (DL_FUNC) &_baquantreg_BayesQR, 15},
    {"_baquantreg_tpBayesQR", (DL_FUNC) &_baquantreg_tpBayesQR, 14},
    {"_baquantreg_ziTobitBayesQR", (DL_FUNC) &_baquantreg_ziTobitBayesQR, 14},
    {"_baquantreg_checkPoints", (DL_FUNC) &_baquantreg_checkPoints, 8},
    {"_baquantreg_checkPoints_4d", (DL_FUNC) &_baquantreg_checkPoints_4d, 12},
    {"_baquantreg_checkPoints_cube", (DL_FUNC) &_baquantreg_checkPoints_cube, 10},
    {"_baquantreg_spBayesQR", (DL_FUNC) &_baquantreg_spBayesQR, 21},
    {"_baquantreg_sppBayesQR", (DL_FUNC) &_baquantreg_sppBayesQR, 25},
    {NULL, NULL, 0}
};

RcppExport void R_init_baquantreg(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
